// <auto-generated />
using System;
using LabCaseus.Analise.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LabCaseus.Analise.Infra.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_analise_fisico_quimica");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AspectoVisualId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_aspecto_visual");

                    b.Property<int>("CertificadoAnaliseId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_certificado_analise");

                    b.Property<int>("CloretoId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_cloreto");

                    b.Property<int>("CloroResidualLivreId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_cloreto_visual");

                    b.Property<int>("CorAparenteId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_cor_aparente");

                    b.Property<int>("FerroId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_ferro");

                    b.Property<int>("PhId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_ph");

                    b.Property<int>("SolidosTotaisDissolvidosId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_solidos_totais_dissolvidos");

                    b.Property<int>("TurbidezId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_turbidez");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_analise_fisico_quimica");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("AspectoVisualId")
                        .IsUnique();

                    b.HasIndex("CloretoId")
                        .IsUnique();

                    b.HasIndex("CloroResidualLivreId")
                        .IsUnique();

                    b.HasIndex("CorAparenteId")
                        .IsUnique();

                    b.HasIndex("FerroId")
                        .IsUnique();

                    b.HasIndex("PhId")
                        .IsUnique();

                    b.HasIndex("SolidosTotaisDissolvidosId")
                        .IsUnique();

                    b.HasIndex("TurbidezId")
                        .IsUnique();

                    b.ToTable("tb_analise_fisico_quimica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AspectoVisualId = 1,
                            CertificadoAnaliseId = 1,
                            CloretoId = 1,
                            CloroResidualLivreId = 1,
                            CorAparenteId = 1,
                            FerroId = 1,
                            PhId = 1,
                            SolidosTotaisDissolvidosId = 1,
                            TurbidezId = 1,
                            UId = new Guid("10e74b5b-ae1a-49db-bea3-33ec9d95d166")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.AnaliseMicrobiologica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_analise_microbiologica");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificadoAnaliseId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_certificado_analise");

                    b.Property<int>("ColiformeTermotoleranteId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_coliforme_termotolerante");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_analise_microbiologica");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("ColiformeTermotoleranteId")
                        .IsUnique();

                    b.ToTable("tb_analise_microbiologica", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificadoAnaliseId = 1,
                            ColiformeTermotoleranteId = 1,
                            UId = new Guid("0a3d048f-12cd-4819-86bb-4a004fff629d")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_certificado_analise");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Amostra")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("des_amostra");

                    b.Property<int>("AnaliseFisicoQuimicaId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_analise_fisico_quimica");

                    b.Property<int>("AnaliseMicrobiologicaId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_analise_microbiologica");

                    b.Property<int>("ClienteId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_cliente");

                    b.Property<DateTime>("DataHoraColeta")
                        .HasColumnType("datetime")
                        .HasColumnName("data_hora_coleta");

                    b.Property<DateTime>("DataHoraInicioAnalise")
                        .HasColumnType("datetime")
                        .HasColumnName("data_hora_inicio_analise");

                    b.Property<DateTime>("DataHoraRecebimentoCaseus")
                        .HasColumnType("datetime")
                        .HasColumnName("data_hora_recebimento_caseus");

                    b.Property<DateTime>("DataHoraTerminoAnalise")
                        .HasColumnType("datetime")
                        .HasColumnName("data_hora_termino_analise");

                    b.Property<int>("FarmaceuticoResponsavelId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_farmaceutico_responsavel");

                    b.Property<string>("FuncaoAgua")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_funcao_agua");

                    b.Property<string>("LocalColeta")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("des_local_coleta");

                    b.Property<string>("Numero")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_numero");

                    b.Property<string>("ParecerFarmaceutico")
                        .IsRequired()
                        .HasMaxLength(350)
                        .HasColumnType("nvarchar(350)")
                        .HasColumnName("des_parecer_farmaceutico");

                    b.Property<string>("ResponsavelColeta")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("des_responsavel_coleta");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_certificado_analise");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("AnaliseFisicoQuimicaId")
                        .IsUnique();

                    b.HasIndex("AnaliseMicrobiologicaId")
                        .IsUnique();

                    b.HasIndex("ClienteId")
                        .IsUnique();

                    b.HasIndex("FarmaceuticoResponsavelId")
                        .IsUnique();

                    b.ToTable("tb_certificado_analise", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Amostra = "Água de recreação",
                            AnaliseFisicoQuimicaId = 1,
                            AnaliseMicrobiologicaId = 1,
                            ClienteId = 1,
                            DataHoraColeta = new DateTime(2020, 2, 3, 8, 20, 0, 0, DateTimeKind.Unspecified),
                            DataHoraInicioAnalise = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataHoraRecebimentoCaseus = new DateTime(2020, 2, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DataHoraTerminoAnalise = new DateTime(2020, 2, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FarmaceuticoResponsavelId = 1,
                            FuncaoAgua = "Lazer",
                            LocalColeta = "Piscina Grande",
                            Numero = "AGUA 056/20",
                            ParecerFarmaceutico = "A amostra analisada atende às especificações descritas.",
                            ResponsavelColeta = "Aparecida Amadeu",
                            UId = new Guid("c47b0055-23b7-4395-a5cd-804076149026")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Cnpj")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_cnpj");

                    b.Property<string>("Endereco")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("des_endereco");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("des_razao_social");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_cliente");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_cliente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Cnpj = "19.532.464/0001-77",
                            Endereco = "Avenida Cel. Antônio Augusto de Souza 49 - Cataguases - MG",
                            RazaoSocial = "Clube do Remo",
                            UId = new Guid("06c7966f-0635-444d-9f72-a9597a786d88")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.EspecificacaoMetodologiaAnalise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_especificacao_metodologia_analise");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CertificadoAnaliseId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_certificado_analise");

                    b.Property<int>("EspecificacaoMetodologiaId")
                        .HasColumnType("int")
                        .HasColumnName("fk_cod_especificacao_metodologia");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_especificacao_metodologia_analise");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.HasIndex("CertificadoAnaliseId");

                    b.HasIndex("EspecificacaoMetodologiaId");

                    b.ToTable("tb_especificacao_metodologia_analise", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CertificadoAnaliseId = 1,
                            EspecificacaoMetodologiaId = 1,
                            UId = new Guid("8bae27b6-0168-4821-9d52-32a520f01534")
                        },
                        new
                        {
                            Id = 2,
                            CertificadoAnaliseId = 1,
                            EspecificacaoMetodologiaId = 2,
                            UId = new Guid("0a556534-d686-4206-ba77-4b2cb84391fd")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.FarmaceuticoResponsavel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_farmaceutico_responsavel");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FarmaceuticoEspecialidade")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("des_farmaceutico_especialidade");

                    b.Property<string>("FarmaceuticoNome")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("des_farmaceutico_nome");

                    b.Property<string>("FarmaceuticoRegistroCrq")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("des_farmaceutico_registro_crq");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_farmaceutico_responsavel");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_farmaceutico_responsavel", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FarmaceuticoEspecialidade = "Farmacêutico Bioquímico",
                            FarmaceuticoNome = "José Carlos de Almeida Junior",
                            FarmaceuticoRegistroCrq = "CRQ/MG 02419351",
                            UId = new Guid("5c60d401-6ae0-489f-9c85-f02144cc87ea")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.AspectoVisual", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_aspecto_visual");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_aspecto_visual");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_aspecto_visual", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Ausência de floração de algas ou outros organismos",
                            Resultado = "De acordo",
                            UId = new Guid("0e691995-7538-4992-bc3e-d53f1a1b4433")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Cloreto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_cloreto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_cloreto");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_cloreto", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Máximo 250 mg/L",
                            Resultado = "31,8 mg/L",
                            UId = new Guid("e3a58dc5-c408-46b2-a1f9-0d9b4c7d4ea7")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.CloroResidualLivre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_cloro_residual_livre");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_cloro_residual_livre");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_cloro_residual_livre", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Mínimo 1,0 mg/L",
                            Resultado = "4,2 mg/L",
                            UId = new Guid("37fcc2c2-8409-4acf-8ff1-190c2d9ec609")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.ColiformeTermotolerante", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_coliforme_termotolerante");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_coliforme_termotolerante");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_coliforme_termotolerante", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Máximo 2500 UFC/mL",
                            Resultado = "<1,0 x 10¹ UFC/mL est",
                            UId = new Guid("9220115b-2bb7-4d65-a8d5-e21a00d93805")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.CorAparente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_cor_aparente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_cor_aparente");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_cor_aparente", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Máximo 75 uH",
                            Resultado = "0,0 uH",
                            UId = new Guid("9307da80-55af-4492-9d9c-ec9eee8137fd")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.EspecificacaoMetodologia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_especificacao_metodologia");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)")
                        .HasColumnName("des_especificacao_metodologia");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_especificacao_metodologia");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_especificacao_metodologia", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descricao = "Resolução CONAMA nº 274 de 29 de novembro de 2000.",
                            UId = new Guid("32ca7dc4-1d92-43cc-8e6b-e970ec6835c1")
                        },
                        new
                        {
                            Id = 2,
                            Descricao = "Standard Methods for the Examination of Water and Wastewater - American Public Health Association (APHA).",
                            UId = new Guid("3f27e88f-40a8-49c6-9778-d8539330a236")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Ferro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_ferro");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_ferro");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_ferro", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Máximo 0,3 mg/L",
                            Resultado = "0,0 mg/L",
                            UId = new Guid("6af134df-109e-4c67-a7b2-2f968f208dd1")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Ph", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_ph");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_ph");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_ph", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "0,6 a 0,9",
                            Resultado = "7,8",
                            UId = new Guid("ef971fed-5453-4fc2-bd21-c33f26c10945")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.SolidosTotaisDissolvidos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_solidos_totais_dissolvidos");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_solidos_totais_dissolvidos");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_solidos_totais_dissolvidos", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Máximo 500 mg/L",
                            Resultado = "229,0 mg/L",
                            UId = new Guid("6fc4a626-a768-4b81-9d2b-8336923546b5")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Turbidez", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("cod_turbidez");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Especificacao")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)")
                        .HasColumnName("des_especificacao");

                    b.Property<string>("Resultado")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("des_resultado");

                    b.Property<Guid>("UId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("uid_turbidez");

                    b.HasKey("Id");

                    SqlServerKeyBuilderExtensions.IsClustered(b.HasKey("Id"));

                    b.ToTable("tb_turbidez", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Especificacao = "Máximo 40 uT",
                            Resultado = "0,8 uT",
                            UId = new Guid("43a45291-1c6b-44c9-b4eb-88cc5b8cecf6")
                        });
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", b =>
                {
                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.AspectoVisual", "AspectoVisual")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "AspectoVisualId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.Cloreto", "Cloreto")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "CloretoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.CloroResidualLivre", "CloroResidualLivre")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "CloroResidualLivreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.CorAparente", "CorAparente")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "CorAparenteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.Ferro", "Ferro")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "FerroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.Ph", "Ph")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "PhId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.SolidosTotaisDissolvidos", "SolidosTotaisDissolvidos")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "SolidosTotaisDissolvidosId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.Turbidez", "Turbidez")
                        .WithOne("AnaliseFisicoQuimica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "TurbidezId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspectoVisual");

                    b.Navigation("Cloreto");

                    b.Navigation("CloroResidualLivre");

                    b.Navigation("CorAparente");

                    b.Navigation("Ferro");

                    b.Navigation("Ph");

                    b.Navigation("SolidosTotaisDissolvidos");

                    b.Navigation("Turbidez");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.AnaliseMicrobiologica", b =>
                {
                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.ColiformeTermotolerante", "ColiformeTermotolerante")
                        .WithOne("AnaliseMicrobiologica")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.AnaliseMicrobiologica", "ColiformeTermotoleranteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ColiformeTermotolerante");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", b =>
                {
                    b.HasOne("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", "AnaliseFisicoQuimica")
                        .WithOne("CertificadoAnalise")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", "AnaliseFisicoQuimicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.Entities.AnaliseMicrobiologica", "AnaliseMicrobiologica")
                        .WithOne("CertificadoAnalise")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", "AnaliseMicrobiologicaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.Entities.Cliente", "Cliente")
                        .WithOne("CertificadoAnalise")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", "ClienteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.Entities.FarmaceuticoResponsavel", "FarmaceuticoResponsavel")
                        .WithOne("CertificadoAnalise")
                        .HasForeignKey("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", "FarmaceuticoResponsavelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AnaliseFisicoQuimica");

                    b.Navigation("AnaliseMicrobiologica");

                    b.Navigation("Cliente");

                    b.Navigation("FarmaceuticoResponsavel");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.EspecificacaoMetodologiaAnalise", b =>
                {
                    b.HasOne("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", "CertificadoAnalise")
                        .WithMany("EspecificacaosMetodologiasAnalise")
                        .HasForeignKey("CertificadoAnaliseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LabCaseus.Analise.Domain.ValueObjects.EspecificacaoMetodologia", "EspecificacaoMetodologia")
                        .WithMany("EspecificacaoMetodologiaAnalise")
                        .HasForeignKey("EspecificacaoMetodologiaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CertificadoAnalise");

                    b.Navigation("EspecificacaoMetodologia");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.AnaliseFisicoQuimica", b =>
                {
                    b.Navigation("CertificadoAnalise");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.AnaliseMicrobiologica", b =>
                {
                    b.Navigation("CertificadoAnalise");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.CertificadoAnalise", b =>
                {
                    b.Navigation("EspecificacaosMetodologiasAnalise");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.Cliente", b =>
                {
                    b.Navigation("CertificadoAnalise");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.Entities.FarmaceuticoResponsavel", b =>
                {
                    b.Navigation("CertificadoAnalise");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.AspectoVisual", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Cloreto", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.CloroResidualLivre", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.ColiformeTermotolerante", b =>
                {
                    b.Navigation("AnaliseMicrobiologica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.CorAparente", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.EspecificacaoMetodologia", b =>
                {
                    b.Navigation("EspecificacaoMetodologiaAnalise");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Ferro", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Ph", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.SolidosTotaisDissolvidos", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });

            modelBuilder.Entity("LabCaseus.Analise.Domain.ValueObjects.Turbidez", b =>
                {
                    b.Navigation("AnaliseFisicoQuimica");
                });
#pragma warning restore 612, 618
        }
    }
}
